CCS PCM C Compiler, Version 4.057, 12452               11-Sep-15 15:42

               Filename: main.lst

               ROM used: 2032 words (25%)
                         Largest free fragment is 2048
               RAM used: 86 (23%) at main() level
                         91 (25%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   723
0003:  NOP
.................... #include "C:\Users\kcon\Desktop\solartrackmaharshi\main.h" 
.................... #include <16F887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES PROTECT                  //Code protected from reads 
.................... #FUSES CPD                      //Data EEPROM Code Protected 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOIESO                   //Internal External Switch Over mode disabled 
.................... #FUSES NOFCMEN                  //Fail-safe clock monitor disabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES BORV40                   //Brownout reset at 4.0V 
....................  
.................... #use delay(clock=4000000) 
*
01AB:  MOVLW  71
01AC:  MOVWF  04
01AD:  BCF    03.7
01AE:  MOVF   00,W
01AF:  BTFSC  03.2
01B0:  GOTO   1BF
01B1:  MOVLW  01
01B2:  MOVWF  78
01B3:  CLRF   77
01B4:  DECFSZ 77,F
01B5:  GOTO   1B4
01B6:  DECFSZ 78,F
01B7:  GOTO   1B3
01B8:  MOVLW  4A
01B9:  MOVWF  77
01BA:  DECFSZ 77,F
01BB:  GOTO   1BA
01BC:  GOTO   1BD
01BD:  DECFSZ 00,F
01BE:  GOTO   1B1
01BF:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... /////////////////////////////////// 
.................... #define RS   PIN_E0 
.................... #define RW   PIN_E1 
.................... #define EN   PIN_E2 
....................   
.................... #define D4   PIN_C0 
.................... #define D5   PIN_C1 
.................... #define D6   PIN_C2 
.................... #define D7   PIN_C3 
.................... ////////////////////////////////// 
.................... #define inc PIN_C4 
.................... #define dec PIN_C5 
.................... /////////////////////////////// 
.................... #define SS4 PIN_D0 
.................... #define SS3 PIN_D1 
.................... #define SS2 PIN_D2 
.................... #define SS1 PIN_D3 
....................  
....................  
....................   #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #IF !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #ENDIF 
....................  
.................... #IF defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #ENDIF 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #IF defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    int8  data1,data2; 
....................    #endif 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #IF !defined(__PCD__) 
....................      *((unsigned int8 *)(&y)) = 0x7E;  
.................... #ENDIF 
....................  
.................... #IF defined(__PCD__) // Takes care of IEEE format 
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
.................... #ENDIF 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #IF !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #ENDIF 
.................... #IF defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
.................... #ENDIF 
....................  
....................       if (n<0) 
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int8  data1,data2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int8  data1,data2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
....................  
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................   
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int8 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................    data1--; 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(___PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int8 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................    data1--; 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................       (*p)--; 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................   #ZERO_RAM 
....................  
....................   char digit10=0; 
*
0775:  BCF    03.6
0776:  CLRF   20
....................   char digit2t=0; 
0777:  CLRF   21
....................   char digit11=0; 
0778:  CLRF   22
....................   char digit12=0; 
0779:  CLRF   23
....................   char digit13=0; 
077A:  CLRF   24
....................   long value=0;// 
077B:  CLRF   25
077C:  CLRF   26
....................   long xadc=0;// 
077D:  CLRF   27
077E:  CLRF   28
....................     
....................   char digitd1=0; 
077F:  CLRF   29
....................   char digitd2=0; 
0780:  CLRF   2A
....................    
....................   char digit0=0; 
0781:  CLRF   2B
....................   char digit1=0; 
0782:  CLRF   2C
....................   char digitep;// 
....................   char digitwp;// 
....................   char digitsp;// 
....................   char digitnp;// 
....................   char digite0;// 
....................   char digitw0;// 
....................   char digits0;// 
....................   char digitn0;// 
....................   char digite1;// 
....................   char digite2;// 
....................  
....................   char digitw1;// 
....................   char digitw2;// 
....................  
....................   char digitn1;// 
....................   char digitn2;// 
....................  
....................   char digits1;// 
....................   char digits2;// 
....................  
....................   long digit1lcd;// 
....................   long digit2lcd;// 
....................   long digit3lcd;// 
....................   long digit4lcd;// 
....................   long digit5lcd;// 
....................   
....................    
....................   char line10[20]; 
....................   char line20[20];   
....................  
.................... BYTE CONST lin1[]= {" SOLAR TRACKER  "};  //digit5=1 
.................... BYTE CONST lin2[]= {"----------------"};  //digit5=2 
.................... BYTE CONST lin3[]= {" SOLAR AT  HOME "};  //digit5=3 
.................... BYTE CONST lin4[]= {"  POSITION SET  "};  //digit5=4 
....................  
....................  
.................... void delay1d() 
....................  { 
....................  
....................   delay_us( 100 ); 
....................  
.................... } 
.................... void delay2d() 
....................  { 
....................  
....................   delay_us(400); 
....................  
.................... }   
.................... ////////////////////////////////////////////////////////////// 
.................... void delaylcd() 
....................  { 
....................  
....................   delay_ms( 1 ); 
*
01C4:  MOVLW  01
01C5:  MOVWF  71
01C6:  CALL   1AB
....................  
.................... } 
01C7:  RETLW  00
.................... void delay1lcd() 
....................  { 
....................  
....................   delay_ms( 4 ); 
*
0249:  MOVLW  04
024A:  MOVWF  71
024B:  CALL   1AB
....................  
.................... } 
024C:  RETLW  00
.................... void delay() 
....................  { 
....................  
....................   delay_ms( 6 ); 
*
01C0:  MOVLW  06
01C1:  MOVWF  71
01C2:  CALL   1AB
....................  
.................... } 
01C3:  RETLW  00
.................... void delaysecond() 
....................  { 
....................  
....................   delay_ms( 1000 ); 
*
033E:  MOVLW  04
033F:  MOVWF  70
0340:  MOVLW  FA
0341:  MOVWF  71
0342:  CALL   1AB
0343:  DECFSZ 70,F
0344:  GOTO   340
....................  
.................... } 
0345:  RETLW  00
....................  
.................... void delay1() 
....................  { 
....................  
....................   delay_us( 100 ); 
0346:  MOVLW  21
0347:  MOVWF  77
0348:  DECFSZ 77,F
0349:  GOTO   348
....................  
.................... } 
034A:  RETLW  00
....................  
.................... void delay2() 
....................  { 
....................  
....................   delay_ms(4); 
....................  
.................... }   
.................... void delay3() 
....................  { 
....................  
....................   delay_ms(5); 
*
0503:  MOVLW  05
0504:  MOVWF  71
0505:  CALL   1AB
....................  
.................... }   
0506:  RETLW  00
.................... void delay4() 
....................  { 
....................  
....................   delay_ms(5); 
*
0634:  MOVLW  05
0635:  MOVWF  71
0636:  CALL   1AB
....................  
.................... }   
.................... void delay6() 
....................  { 
....................  
....................   delay_ms(300); 
*
071B:  MOVLW  02
071C:  MOVWF  70
071D:  MOVLW  96
071E:  MOVWF  71
071F:  CALL   1AB
0720:  DECFSZ 70,F
0721:  GOTO   71D
....................  
.................... }   
0722:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////// 
.................... void wreprom() 
.................... { 
.................... digit13=digit10; 
*
0507:  MOVF   20,W
0508:  MOVWF  24
.................... write_eeprom (0x00, digit13); 
0509:  BSF    03.6
050A:  CLRF   0D
050B:  BCF    03.6
050C:  MOVF   24,W
050D:  BSF    03.6
050E:  MOVWF  0C
050F:  BSF    03.5
0510:  BCF    0C.7
0511:  BSF    0C.2
0512:  BCF    03.5
0513:  BCF    03.6
0514:  MOVF   0B,W
0515:  MOVWF  77
0516:  BCF    0B.7
0517:  BSF    03.5
0518:  BSF    03.6
0519:  MOVLW  55
051A:  MOVWF  0D
051B:  MOVLW  AA
051C:  MOVWF  0D
051D:  BSF    0C.1
051E:  BTFSC  0C.1
051F:  GOTO   51E
0520:  BCF    0C.2
0521:  MOVF   77,W
0522:  BCF    03.5
0523:  BCF    03.6
0524:  IORWF  0B,F
....................  
.................... } 
0525:  RETLW  00
....................  
.................... void wreprom1() 
.................... { 
.................... digit13=digitep; 
*
0692:  MOVF   2D,W
0693:  MOVWF  24
.................... write_eeprom (0x01, digit13); 
0694:  MOVLW  01
0695:  BSF    03.6
0696:  MOVWF  0D
0697:  BCF    03.6
0698:  MOVF   24,W
0699:  BSF    03.6
069A:  MOVWF  0C
069B:  BSF    03.5
069C:  BCF    0C.7
069D:  BSF    0C.2
069E:  BCF    03.5
069F:  BCF    03.6
06A0:  MOVF   0B,W
06A1:  MOVWF  77
06A2:  BCF    0B.7
06A3:  BSF    03.5
06A4:  BSF    03.6
06A5:  MOVLW  55
06A6:  MOVWF  0D
06A7:  MOVLW  AA
06A8:  MOVWF  0D
06A9:  BSF    0C.1
06AA:  BTFSC  0C.1
06AB:  GOTO   6AA
06AC:  BCF    0C.2
06AD:  MOVF   77,W
06AE:  BCF    03.5
06AF:  BCF    03.6
06B0:  IORWF  0B,F
.................... digit13=digitwp; 
06B1:  MOVF   2E,W
06B2:  MOVWF  24
.................... write_eeprom (0x02, digit13); 
06B3:  MOVLW  02
06B4:  BSF    03.6
06B5:  MOVWF  0D
06B6:  BCF    03.6
06B7:  MOVF   24,W
06B8:  BSF    03.6
06B9:  MOVWF  0C
06BA:  BSF    03.5
06BB:  BCF    0C.7
06BC:  BSF    0C.2
06BD:  BCF    03.5
06BE:  BCF    03.6
06BF:  MOVF   0B,W
06C0:  MOVWF  77
06C1:  BCF    0B.7
06C2:  BSF    03.5
06C3:  BSF    03.6
06C4:  MOVLW  55
06C5:  MOVWF  0D
06C6:  MOVLW  AA
06C7:  MOVWF  0D
06C8:  BSF    0C.1
06C9:  BTFSC  0C.1
06CA:  GOTO   6C9
06CB:  BCF    0C.2
06CC:  MOVF   77,W
06CD:  BCF    03.5
06CE:  BCF    03.6
06CF:  IORWF  0B,F
.................... digit13=digitsp; 
06D0:  MOVF   2F,W
06D1:  MOVWF  24
.................... write_eeprom (0x03, digit13); 
06D2:  MOVLW  03
06D3:  BSF    03.6
06D4:  MOVWF  0D
06D5:  BCF    03.6
06D6:  MOVF   24,W
06D7:  BSF    03.6
06D8:  MOVWF  0C
06D9:  BSF    03.5
06DA:  BCF    0C.7
06DB:  BSF    0C.2
06DC:  BCF    03.5
06DD:  BCF    03.6
06DE:  MOVF   0B,W
06DF:  MOVWF  77
06E0:  BCF    0B.7
06E1:  BSF    03.5
06E2:  BSF    03.6
06E3:  MOVLW  55
06E4:  MOVWF  0D
06E5:  MOVLW  AA
06E6:  MOVWF  0D
06E7:  BSF    0C.1
06E8:  BTFSC  0C.1
06E9:  GOTO   6E8
06EA:  BCF    0C.2
06EB:  MOVF   77,W
06EC:  BCF    03.5
06ED:  BCF    03.6
06EE:  IORWF  0B,F
.................... digit13=digitnp; 
06EF:  MOVF   30,W
06F0:  MOVWF  24
.................... write_eeprom (0x04, digit13); 
06F1:  MOVLW  04
06F2:  BSF    03.6
06F3:  MOVWF  0D
06F4:  BCF    03.6
06F5:  MOVF   24,W
06F6:  BSF    03.6
06F7:  MOVWF  0C
06F8:  BSF    03.5
06F9:  BCF    0C.7
06FA:  BSF    0C.2
06FB:  BCF    03.5
06FC:  BCF    03.6
06FD:  MOVF   0B,W
06FE:  MOVWF  77
06FF:  BCF    0B.7
0700:  BSF    03.5
0701:  BSF    03.6
0702:  MOVLW  55
0703:  MOVWF  0D
0704:  MOVLW  AA
0705:  MOVWF  0D
0706:  BSF    0C.1
0707:  BTFSC  0C.1
0708:  GOTO   707
0709:  BCF    0C.2
070A:  MOVF   77,W
070B:  BCF    03.5
070C:  BCF    03.6
070D:  IORWF  0B,F
....................  } 
....................  
....................  
....................  
.................... void readeeprom() 
.................... { 
.................... digit13 = read_eeprom (0x00); 
*
0069:  BSF    03.6
006A:  CLRF   0D
006B:  BSF    03.5
006C:  BCF    0C.7
006D:  BSF    0C.0
006E:  BCF    03.5
006F:  MOVF   0C,W
0070:  BCF    03.6
0071:  MOVWF  24
.................... digit2t=digit13; 
0072:  MOVF   24,W
0073:  MOVWF  21
.................... if(digit2t>99) 
0074:  MOVF   21,W
0075:  SUBLW  63
0076:  BTFSC  03.0
0077:  GOTO   096
.................... { 
.................... digit13=3; 
0078:  MOVLW  03
0079:  MOVWF  24
.................... write_eeprom (0x00, digit13); 
007A:  BSF    03.6
007B:  CLRF   0D
007C:  BCF    03.6
007D:  MOVF   24,W
007E:  BSF    03.6
007F:  MOVWF  0C
0080:  BSF    03.5
0081:  BCF    0C.7
0082:  BSF    0C.2
0083:  BCF    03.5
0084:  BCF    03.6
0085:  MOVF   0B,W
0086:  MOVWF  77
0087:  BCF    0B.7
0088:  BSF    03.5
0089:  BSF    03.6
008A:  MOVLW  55
008B:  MOVWF  0D
008C:  MOVLW  AA
008D:  MOVWF  0D
008E:  BSF    0C.1
008F:  BTFSC  0C.1
0090:  GOTO   08F
0091:  BCF    0C.2
0092:  MOVF   77,W
0093:  BCF    03.5
0094:  BCF    03.6
0095:  IORWF  0B,F
.................... } 
.................... digit10=digit13; 
0096:  MOVF   24,W
0097:  MOVWF  20
....................  
....................  
.................... digit13 = read_eeprom (0x01); 
0098:  MOVLW  01
0099:  BSF    03.6
009A:  MOVWF  0D
009B:  BSF    03.5
009C:  BCF    0C.7
009D:  BSF    0C.0
009E:  BCF    03.5
009F:  MOVF   0C,W
00A0:  BCF    03.6
00A1:  MOVWF  24
.................... digit2t=digit13; 
00A2:  MOVF   24,W
00A3:  MOVWF  21
.................... if(digit2t>59) 
00A4:  MOVF   21,W
00A5:  SUBLW  3B
00A6:  BTFSC  03.0
00A7:  GOTO   0C6
.................... { 
.................... digit13=0; 
00A8:  CLRF   24
.................... write_eeprom (0x01, digit13); 
00A9:  MOVLW  01
00AA:  BSF    03.6
00AB:  MOVWF  0D
00AC:  BCF    03.6
00AD:  MOVF   24,W
00AE:  BSF    03.6
00AF:  MOVWF  0C
00B0:  BSF    03.5
00B1:  BCF    0C.7
00B2:  BSF    0C.2
00B3:  BCF    03.5
00B4:  BCF    03.6
00B5:  MOVF   0B,W
00B6:  MOVWF  77
00B7:  BCF    0B.7
00B8:  BSF    03.5
00B9:  BSF    03.6
00BA:  MOVLW  55
00BB:  MOVWF  0D
00BC:  MOVLW  AA
00BD:  MOVWF  0D
00BE:  BSF    0C.1
00BF:  BTFSC  0C.1
00C0:  GOTO   0BF
00C1:  BCF    0C.2
00C2:  MOVF   77,W
00C3:  BCF    03.5
00C4:  BCF    03.6
00C5:  IORWF  0B,F
.................... } 
.................... digitep=digit13; 
00C6:  MOVF   24,W
00C7:  MOVWF  2D
....................  
....................  
.................... digit13 = read_eeprom (0x02); 
00C8:  MOVLW  02
00C9:  BSF    03.6
00CA:  MOVWF  0D
00CB:  BSF    03.5
00CC:  BCF    0C.7
00CD:  BSF    0C.0
00CE:  BCF    03.5
00CF:  MOVF   0C,W
00D0:  BCF    03.6
00D1:  MOVWF  24
.................... digit2t=digit13; 
00D2:  MOVF   24,W
00D3:  MOVWF  21
.................... if(digit2t>59) 
00D4:  MOVF   21,W
00D5:  SUBLW  3B
00D6:  BTFSC  03.0
00D7:  GOTO   0F6
.................... { 
.................... digit13=0; 
00D8:  CLRF   24
.................... write_eeprom (0x02, digit13); 
00D9:  MOVLW  02
00DA:  BSF    03.6
00DB:  MOVWF  0D
00DC:  BCF    03.6
00DD:  MOVF   24,W
00DE:  BSF    03.6
00DF:  MOVWF  0C
00E0:  BSF    03.5
00E1:  BCF    0C.7
00E2:  BSF    0C.2
00E3:  BCF    03.5
00E4:  BCF    03.6
00E5:  MOVF   0B,W
00E6:  MOVWF  77
00E7:  BCF    0B.7
00E8:  BSF    03.5
00E9:  BSF    03.6
00EA:  MOVLW  55
00EB:  MOVWF  0D
00EC:  MOVLW  AA
00ED:  MOVWF  0D
00EE:  BSF    0C.1
00EF:  BTFSC  0C.1
00F0:  GOTO   0EF
00F1:  BCF    0C.2
00F2:  MOVF   77,W
00F3:  BCF    03.5
00F4:  BCF    03.6
00F5:  IORWF  0B,F
.................... } 
.................... digitwp=digit13; 
00F6:  MOVF   24,W
00F7:  MOVWF  2E
....................  
....................  
.................... digit13 = read_eeprom (0x03); 
00F8:  MOVLW  03
00F9:  BSF    03.6
00FA:  MOVWF  0D
00FB:  BSF    03.5
00FC:  BCF    0C.7
00FD:  BSF    0C.0
00FE:  BCF    03.5
00FF:  MOVF   0C,W
0100:  BCF    03.6
0101:  MOVWF  24
.................... digit2t=digit13; 
0102:  MOVF   24,W
0103:  MOVWF  21
.................... if(digit2t>59) 
0104:  MOVF   21,W
0105:  SUBLW  3B
0106:  BTFSC  03.0
0107:  GOTO   126
.................... { 
.................... digit13=0; 
0108:  CLRF   24
.................... write_eeprom (0x03, digit13); 
0109:  MOVLW  03
010A:  BSF    03.6
010B:  MOVWF  0D
010C:  BCF    03.6
010D:  MOVF   24,W
010E:  BSF    03.6
010F:  MOVWF  0C
0110:  BSF    03.5
0111:  BCF    0C.7
0112:  BSF    0C.2
0113:  BCF    03.5
0114:  BCF    03.6
0115:  MOVF   0B,W
0116:  MOVWF  77
0117:  BCF    0B.7
0118:  BSF    03.5
0119:  BSF    03.6
011A:  MOVLW  55
011B:  MOVWF  0D
011C:  MOVLW  AA
011D:  MOVWF  0D
011E:  BSF    0C.1
011F:  BTFSC  0C.1
0120:  GOTO   11F
0121:  BCF    0C.2
0122:  MOVF   77,W
0123:  BCF    03.5
0124:  BCF    03.6
0125:  IORWF  0B,F
.................... } 
.................... digitsp=digit13; 
0126:  MOVF   24,W
0127:  MOVWF  2F
....................  
....................  
.................... digit13 = read_eeprom (0x04); 
0128:  MOVLW  04
0129:  BSF    03.6
012A:  MOVWF  0D
012B:  BSF    03.5
012C:  BCF    0C.7
012D:  BSF    0C.0
012E:  BCF    03.5
012F:  MOVF   0C,W
0130:  BCF    03.6
0131:  MOVWF  24
.................... digit2t=digit13; 
0132:  MOVF   24,W
0133:  MOVWF  21
.................... if(digit2t>59) 
0134:  MOVF   21,W
0135:  SUBLW  3B
0136:  BTFSC  03.0
0137:  GOTO   156
.................... { 
.................... digit13=0; 
0138:  CLRF   24
.................... write_eeprom (0x04, digit13); 
0139:  MOVLW  04
013A:  BSF    03.6
013B:  MOVWF  0D
013C:  BCF    03.6
013D:  MOVF   24,W
013E:  BSF    03.6
013F:  MOVWF  0C
0140:  BSF    03.5
0141:  BCF    0C.7
0142:  BSF    0C.2
0143:  BCF    03.5
0144:  BCF    03.6
0145:  MOVF   0B,W
0146:  MOVWF  77
0147:  BCF    0B.7
0148:  BSF    03.5
0149:  BSF    03.6
014A:  MOVLW  55
014B:  MOVWF  0D
014C:  MOVLW  AA
014D:  MOVWF  0D
014E:  BSF    0C.1
014F:  BTFSC  0C.1
0150:  GOTO   14F
0151:  BCF    0C.2
0152:  MOVF   77,W
0153:  BCF    03.5
0154:  BCF    03.6
0155:  IORWF  0B,F
.................... } 
.................... digitnp=digit13; 
0156:  MOVF   24,W
0157:  MOVWF  30
....................  
....................  
....................  
.................... } 
0158:  BCF    0A.3
0159:  BCF    0A.4
015A:  GOTO   7C9 (RETURN)
....................  
.................... void offall() 
.................... { 
.................... output_low(SS1); 
*
0058:  BSF    03.5
0059:  BCF    08.3
005A:  BCF    03.5
005B:  BCF    08.3
.................... output_low(SS2); 
005C:  BSF    03.5
005D:  BCF    08.2
005E:  BCF    03.5
005F:  BCF    08.2
.................... output_low(SS3); 
0060:  BSF    03.5
0061:  BCF    08.1
0062:  BCF    03.5
0063:  BCF    08.1
.................... output_low(SS4); 
0064:  BSF    03.5
0065:  BCF    08.0
0066:  BCF    03.5
0067:  BCF    08.0
.................... } 
0068:  RETLW  00
....................  
.................... void onx1() 
.................... { 
.................... output_high(SS1); 
*
04CE:  BSF    03.5
04CF:  BCF    08.3
04D0:  BCF    03.5
04D1:  BSF    08.3
.................... output_low(SS2); 
04D2:  BSF    03.5
04D3:  BCF    08.2
04D4:  BCF    03.5
04D5:  BCF    08.2
.................... delay(); 
04D6:  CALL   1C0
.................... offall(); 
04D7:  CALL   058
.................... } 
....................  
.................... void onx2() 
.................... { 
.................... output_high(SS2); 
*
04DC:  BSF    03.5
04DD:  BCF    08.2
04DE:  BCF    03.5
04DF:  BSF    08.2
.................... output_low(SS1); 
04E0:  BSF    03.5
04E1:  BCF    08.3
04E2:  BCF    03.5
04E3:  BCF    08.3
.................... delay(); 
04E4:  CALL   1C0
.................... offall(); 
04E5:  CALL   058
.................... } 
....................  
.................... void onx3() 
.................... { 
.................... output_high(SS3); 
*
04E8:  BSF    03.5
04E9:  BCF    08.1
04EA:  BCF    03.5
04EB:  BSF    08.1
.................... output_low(SS4); 
04EC:  BSF    03.5
04ED:  BCF    08.0
04EE:  BCF    03.5
04EF:  BCF    08.0
.................... delay(); 
04F0:  CALL   1C0
.................... offall(); 
04F1:  CALL   058
.................... } 
....................  
.................... void onx4() 
.................... { 
.................... output_high(SS4); 
*
04F6:  BSF    03.5
04F7:  BCF    08.0
04F8:  BCF    03.5
04F9:  BSF    08.0
.................... output_low(SS3); 
04FA:  BSF    03.5
04FB:  BCF    08.1
04FC:  BCF    03.5
04FD:  BCF    08.1
.................... delay(); 
04FE:  CALL   1C0
.................... offall(); 
04FF:  CALL   058
.................... } 
....................   
.................... void writelcd() 
.................... { 
.................... output_low(d4); 
*
01C8:  BCF    6F.0
01C9:  MOVF   6F,W
01CA:  BSF    03.5
01CB:  MOVWF  07
01CC:  BCF    03.5
01CD:  BCF    07.0
*
0783:  MOVLW  FF
0784:  MOVWF  6F
.................... output_low(d5); 
*
01CE:  BCF    6F.1
01CF:  MOVF   6F,W
01D0:  BSF    03.5
01D1:  MOVWF  07
01D2:  BCF    03.5
01D3:  BCF    07.1
.................... output_low(d6); 
01D4:  BCF    6F.2
01D5:  MOVF   6F,W
01D6:  BSF    03.5
01D7:  MOVWF  07
01D8:  BCF    03.5
01D9:  BCF    07.2
.................... output_low(d7); 
01DA:  BCF    6F.3
01DB:  MOVF   6F,W
01DC:  BSF    03.5
01DD:  MOVWF  07
01DE:  BCF    03.5
01DF:  BCF    07.3
.................... if( bit_test(digit1lcd,4)) 
01E0:  BTFSS  3D.4
01E1:  GOTO   1E8
.................... {                                
.................... output_high(d4); 
01E2:  BCF    6F.0
01E3:  MOVF   6F,W
01E4:  BSF    03.5
01E5:  MOVWF  07
01E6:  BCF    03.5
01E7:  BSF    07.0
.................... } 
.................... if( bit_test(digit1lcd,5)) 
01E8:  BTFSS  3D.5
01E9:  GOTO   1F0
.................... {                                
.................... output_high(d5); 
01EA:  BCF    6F.1
01EB:  MOVF   6F,W
01EC:  BSF    03.5
01ED:  MOVWF  07
01EE:  BCF    03.5
01EF:  BSF    07.1
.................... } 
.................... if( bit_test(digit1lcd,6)) 
01F0:  BTFSS  3D.6
01F1:  GOTO   1F8
.................... {                                
.................... output_high(d6); 
01F2:  BCF    6F.2
01F3:  MOVF   6F,W
01F4:  BSF    03.5
01F5:  MOVWF  07
01F6:  BCF    03.5
01F7:  BSF    07.2
.................... } 
.................... if( bit_test(digit1lcd,7)) 
01F8:  BTFSS  3D.7
01F9:  GOTO   200
.................... {                                
.................... output_high(d7); 
01FA:  BCF    6F.3
01FB:  MOVF   6F,W
01FC:  BSF    03.5
01FD:  MOVWF  07
01FE:  BCF    03.5
01FF:  BSF    07.3
.................... } 
....................  
.................... output_high(en); 
0200:  BSF    03.5
0201:  BCF    09.2
0202:  BCF    03.5
0203:  BSF    09.2
.................... output_low(en); 
0204:  BSF    03.5
0205:  BCF    09.2
0206:  BCF    03.5
0207:  BCF    09.2
.................... output_low(d4); 
0208:  BCF    6F.0
0209:  MOVF   6F,W
020A:  BSF    03.5
020B:  MOVWF  07
020C:  BCF    03.5
020D:  BCF    07.0
.................... output_low(d5); 
020E:  BCF    6F.1
020F:  MOVF   6F,W
0210:  BSF    03.5
0211:  MOVWF  07
0212:  BCF    03.5
0213:  BCF    07.1
.................... output_low(d6); 
0214:  BCF    6F.2
0215:  MOVF   6F,W
0216:  BSF    03.5
0217:  MOVWF  07
0218:  BCF    03.5
0219:  BCF    07.2
.................... output_low(d7); 
021A:  BCF    6F.3
021B:  MOVF   6F,W
021C:  BSF    03.5
021D:  MOVWF  07
021E:  BCF    03.5
021F:  BCF    07.3
.................... if( bit_test(digit1lcd,0)) 
0220:  BTFSS  3D.0
0221:  GOTO   228
.................... {                                
.................... output_high(d4); 
0222:  BCF    6F.0
0223:  MOVF   6F,W
0224:  BSF    03.5
0225:  MOVWF  07
0226:  BCF    03.5
0227:  BSF    07.0
.................... } 
.................... if( bit_test(digit1lcd,1)) 
0228:  BTFSS  3D.1
0229:  GOTO   230
.................... {                                
.................... output_high(d5); 
022A:  BCF    6F.1
022B:  MOVF   6F,W
022C:  BSF    03.5
022D:  MOVWF  07
022E:  BCF    03.5
022F:  BSF    07.1
.................... } 
.................... if( bit_test(digit1lcd,2)) 
0230:  BTFSS  3D.2
0231:  GOTO   238
.................... {                                
.................... output_high(d6); 
0232:  BCF    6F.2
0233:  MOVF   6F,W
0234:  BSF    03.5
0235:  MOVWF  07
0236:  BCF    03.5
0237:  BSF    07.2
.................... } 
.................... if( bit_test(digit1lcd,3)) 
0238:  BTFSS  3D.3
0239:  GOTO   240
.................... {                                
.................... output_high(d7); 
023A:  BCF    6F.3
023B:  MOVF   6F,W
023C:  BSF    03.5
023D:  MOVWF  07
023E:  BCF    03.5
023F:  BSF    07.3
.................... } 
.................... output_high(en); 
0240:  BSF    03.5
0241:  BCF    09.2
0242:  BCF    03.5
0243:  BSF    09.2
.................... output_low(en); 
0244:  BSF    03.5
0245:  BCF    09.2
0246:  BCF    03.5
0247:  BCF    09.2
.................... } 
0248:  RETLW  00
....................  
.................... void lcdreset() 
.................... { 
.................... output_low(rs);  
*
02D8:  BSF    03.5
02D9:  BCF    09.0
02DA:  BCF    03.5
02DB:  BCF    09.0
.................... output_low(en); 
02DC:  BSF    03.5
02DD:  BCF    09.2
02DE:  BCF    03.5
02DF:  BCF    09.2
.................... output_low(d7);  
02E0:  BCF    6F.3
02E1:  MOVF   6F,W
02E2:  BSF    03.5
02E3:  MOVWF  07
02E4:  BCF    03.5
02E5:  BCF    07.3
.................... output_low(d6);  
02E6:  BCF    6F.2
02E7:  MOVF   6F,W
02E8:  BSF    03.5
02E9:  MOVWF  07
02EA:  BCF    03.5
02EB:  BCF    07.2
.................... output_high(d5);  
02EC:  BCF    6F.1
02ED:  MOVF   6F,W
02EE:  BSF    03.5
02EF:  MOVWF  07
02F0:  BCF    03.5
02F1:  BSF    07.1
.................... output_high(d4); 
02F2:  BCF    6F.0
02F3:  MOVF   6F,W
02F4:  BSF    03.5
02F5:  MOVWF  07
02F6:  BCF    03.5
02F7:  BSF    07.0
.................... output_high(en); 
02F8:  BSF    03.5
02F9:  BCF    09.2
02FA:  BCF    03.5
02FB:  BSF    09.2
.................... output_low(en); 
02FC:  BSF    03.5
02FD:  BCF    09.2
02FE:  BCF    03.5
02FF:  BCF    09.2
.................... delaylcd(); 
0300:  CALL   1C4
.................... output_high(en); 
0301:  BSF    03.5
0302:  BCF    09.2
0303:  BCF    03.5
0304:  BSF    09.2
.................... output_low(en); 
0305:  BSF    03.5
0306:  BCF    09.2
0307:  BCF    03.5
0308:  BCF    09.2
.................... delaylcd(); 
0309:  CALL   1C4
.................... output_high(en); 
030A:  BSF    03.5
030B:  BCF    09.2
030C:  BCF    03.5
030D:  BSF    09.2
.................... output_low(en); 
030E:  BSF    03.5
030F:  BCF    09.2
0310:  BCF    03.5
0311:  BCF    09.2
.................... delaylcd(); 
0312:  CALL   1C4
.................... output_low(d4); 
0313:  BCF    6F.0
0314:  MOVF   6F,W
0315:  BSF    03.5
0316:  MOVWF  07
0317:  BCF    03.5
0318:  BCF    07.0
.................... output_high(en); 
0319:  BSF    03.5
031A:  BCF    09.2
031B:  BCF    03.5
031C:  BSF    09.2
.................... output_low(en); 
031D:  BSF    03.5
031E:  BCF    09.2
031F:  BCF    03.5
0320:  BCF    09.2
.................... delaylcd();      
0321:  CALL   1C4
.................... }         
....................           
.................... void wrlcdcom4() 
.................... { 
.................... output_low(en); 
*
024D:  BSF    03.5
024E:  BCF    09.2
024F:  BCF    03.5
0250:  BCF    09.2
.................... output_low(rs); 
0251:  BSF    03.5
0252:  BCF    09.0
0253:  BCF    03.5
0254:  BCF    09.0
.................... writelcd(); 
0255:  CALL   1C8
.................... delay1lcd(); 
0256:  CALL   249
.................... } 
0257:  RETLW  00
.................... void wrlcddata4() 
.................... { 
.................... output_low(en); 
*
0296:  BSF    03.5
0297:  BCF    09.2
0298:  BCF    03.5
0299:  BCF    09.2
.................... output_high(rs); 
029A:  BSF    03.5
029B:  BCF    09.0
029C:  BCF    03.5
029D:  BSF    09.0
.................... writelcd(); 
029E:  CALL   1C8
.................... delaylcd(); 
029F:  CALL   1C4
.................... } 
02A0:  RETLW  00
.................... void resetlcd() 
.................... { 
....................  digit1lcd=0x2c; 
*
0322:  CLRF   3E
0323:  MOVLW  2C
0324:  MOVWF  3D
....................  wrlcdcom4(); 
0325:  CALL   24D
....................  
....................  digit1lcd=0x0c; 
0326:  CLRF   3E
0327:  MOVLW  0C
0328:  MOVWF  3D
....................  wrlcdcom4(); 
0329:  CALL   24D
....................  
....................  digit1lcd=0x06; 
032A:  CLRF   3E
032B:  MOVLW  06
032C:  MOVWF  3D
....................  wrlcdcom4(); 
032D:  CALL   24D
....................  
....................  digit1lcd=0x01; 
032E:  CLRF   3E
032F:  MOVLW  01
0330:  MOVWF  3D
....................  wrlcdcom4(); 
0331:  CALL   24D
.................... delay1lcd(); 
0332:  CALL   249
.................... } 
.................... void selectdis() 
.................... { 
.................... if (digit5lcd==1) 
*
0258:  DECFSZ 45,W
0259:  GOTO   266
025A:  MOVF   46,F
025B:  BTFSS  03.2
025C:  GOTO   266
.................... { 
.................... digit1lcd=(lin1[digit3lcd]);   
025D:  MOVF   42,W
025E:  MOVWF  7A
025F:  MOVF   41,W
0260:  CALL   004
0261:  MOVWF  78
0262:  CLRF   3E
0263:  MOVF   78,W
0264:  MOVWF  3D
.................... } 
.................... else if (digit5lcd==2) 
0265:  GOTO   295
0266:  MOVF   45,W
0267:  SUBLW  02
0268:  BTFSS  03.2
0269:  GOTO   276
026A:  MOVF   46,F
026B:  BTFSS  03.2
026C:  GOTO   276
.................... { 
.................... digit1lcd=(lin2[digit3lcd]);   
026D:  MOVF   42,W
026E:  MOVWF  7A
026F:  MOVF   41,W
0270:  CALL   019
0271:  MOVWF  78
0272:  CLRF   3E
0273:  MOVF   78,W
0274:  MOVWF  3D
.................... } 
.................... else if (digit5lcd==3) 
0275:  GOTO   295
0276:  MOVF   45,W
0277:  SUBLW  03
0278:  BTFSS  03.2
0279:  GOTO   286
027A:  MOVF   46,F
027B:  BTFSS  03.2
027C:  GOTO   286
.................... { 
.................... digit1lcd=(lin3[digit3lcd]);   
027D:  MOVF   42,W
027E:  MOVWF  7A
027F:  MOVF   41,W
0280:  CALL   02E
0281:  MOVWF  78
0282:  CLRF   3E
0283:  MOVF   78,W
0284:  MOVWF  3D
.................... } 
.................... else if (digit5lcd==4) 
0285:  GOTO   295
0286:  MOVF   45,W
0287:  SUBLW  04
0288:  BTFSS  03.2
0289:  GOTO   295
028A:  MOVF   46,F
028B:  BTFSS  03.2
028C:  GOTO   295
.................... { 
.................... digit1lcd=(lin4[digit3lcd]);   
028D:  MOVF   42,W
028E:  MOVWF  7A
028F:  MOVF   41,W
0290:  CALL   043
0291:  MOVWF  78
0292:  CLRF   3E
0293:  MOVF   78,W
0294:  MOVWF  3D
.................... } 
.................... } 
0295:  RETLW  00
.................... void line1() 
.................... { 
.................... digit1lcd=0x80; 
*
02A1:  CLRF   3E
02A2:  MOVLW  80
02A3:  MOVWF  3D
.................... wrlcdcom4(); 
02A4:  CALL   24D
.................... digit3lcd=0x00; 
02A5:  CLRF   42
02A6:  CLRF   41
.................... digit4lcd=0x00; 
02A7:  CLRF   44
02A8:  CLRF   43
.................... upperline: 
.................... if (digit4lcd<16) 
02A9:  MOVF   44,F
02AA:  BTFSS  03.2
02AB:  GOTO   2BB
02AC:  MOVF   43,W
02AD:  SUBLW  0F
02AE:  BTFSS  03.0
02AF:  GOTO   2BB
.................... { 
.................... selectdis(); 
02B0:  CALL   258
.................... wrlcddata4(); 
02B1:  CALL   296
.................... digit4lcd=digit4lcd+1; 
02B2:  MOVLW  01
02B3:  ADDWF  43,F
02B4:  BTFSC  03.0
02B5:  INCF   44,F
.................... digit3lcd=digit3lcd+1; 
02B6:  MOVLW  01
02B7:  ADDWF  41,F
02B8:  BTFSC  03.0
02B9:  INCF   42,F
.................... goto upperline; 
02BA:  GOTO   2A9
.................... } 
.................... } 
02BB:  RETLW  00
.................... void line2() 
.................... { 
.................... digit1lcd=0xc0; 
02BC:  CLRF   3E
02BD:  MOVLW  C0
02BE:  MOVWF  3D
.................... wrlcdcom4(); 
02BF:  CALL   24D
.................... digit3lcd=0x00; 
02C0:  CLRF   42
02C1:  CLRF   41
.................... digit4lcd=0x00; 
02C2:  CLRF   44
02C3:  CLRF   43
.................... line1line: 
.................... if (digit4lcd<16) 
02C4:  MOVF   44,F
02C5:  BTFSS  03.2
02C6:  GOTO   2D6
02C7:  MOVF   43,W
02C8:  SUBLW  0F
02C9:  BTFSS  03.0
02CA:  GOTO   2D6
.................... { 
.................... selectdis(); 
02CB:  CALL   258
.................... wrlcddata4(); 
02CC:  CALL   296
.................... digit4lcd=digit4lcd+1; 
02CD:  MOVLW  01
02CE:  ADDWF  43,F
02CF:  BTFSC  03.0
02D0:  INCF   44,F
.................... digit3lcd=digit3lcd+1; 
02D1:  MOVLW  01
02D2:  ADDWF  41,F
02D3:  BTFSC  03.0
02D4:  INCF   42,F
.................... goto line1line; 
02D5:  GOTO   2C4
.................... } 
.................... } 
02D6:  RETLW  00
....................  
.................... /////////////////////////////////////////////////////////////////////// 
....................  
.................... void line1ram() 
.................... { 
.................... digit1lcd=0x80; 
*
059E:  CLRF   3E
059F:  MOVLW  80
05A0:  MOVWF  3D
.................... wrlcdcom4(); 
05A1:  CALL   24D
.................... digit3lcd=0x00; 
05A2:  CLRF   42
05A3:  CLRF   41
.................... digit4lcd=0x00; 
05A4:  CLRF   44
05A5:  CLRF   43
.................... line1line20: 
.................... if (digit4lcd<16) 
05A6:  MOVF   44,F
05A7:  BTFSS  03.2
05A8:  GOTO   5C2
05A9:  MOVF   43,W
05AA:  SUBLW  0F
05AB:  BTFSS  03.0
05AC:  GOTO   5C2
.................... { 
.................... digit1lcd=line10[digit3lcd]; 
05AD:  MOVLW  47
05AE:  ADDWF  41,W
05AF:  MOVWF  04
05B0:  BCF    03.7
05B1:  BTFSC  42.0
05B2:  BSF    03.7
05B3:  MOVF   00,W
05B4:  CLRF   7A
05B5:  MOVWF  3D
05B6:  MOVF   7A,W
05B7:  MOVWF  3E
.................... wrlcddata4(); 
05B8:  CALL   296
.................... digit4lcd=digit4lcd+1; 
05B9:  MOVLW  01
05BA:  ADDWF  43,F
05BB:  BTFSC  03.0
05BC:  INCF   44,F
.................... digit3lcd=digit3lcd+1; 
05BD:  MOVLW  01
05BE:  ADDWF  41,F
05BF:  BTFSC  03.0
05C0:  INCF   42,F
.................... goto line1line20; 
05C1:  GOTO   5A6
.................... } 
.................... } 
05C2:  BCF    0A.3
05C3:  BCF    0A.4
05C4:  GOTO   7D3 (RETURN)
....................  
.................... void line2ram() 
.................... { 
.................... digit1lcd=0xc0; 
*
0603:  CLRF   3E
0604:  MOVLW  C0
0605:  MOVWF  3D
.................... wrlcdcom4(); 
0606:  CALL   24D
.................... digit3lcd=0x00; 
0607:  CLRF   42
0608:  CLRF   41
.................... digit4lcd=0x00; 
0609:  CLRF   44
060A:  CLRF   43
.................... upperline1: 
.................... if (digit4lcd<16) 
060B:  MOVF   44,F
060C:  BTFSS  03.2
060D:  GOTO   627
060E:  MOVF   43,W
060F:  SUBLW  0F
0610:  BTFSS  03.0
0611:  GOTO   627
.................... { 
.................... digit1lcd=line20[digit3lcd]; 
0612:  MOVLW  5B
0613:  ADDWF  41,W
0614:  MOVWF  04
0615:  BCF    03.7
0616:  BTFSC  42.0
0617:  BSF    03.7
0618:  MOVF   00,W
0619:  CLRF   7A
061A:  MOVWF  3D
061B:  MOVF   7A,W
061C:  MOVWF  3E
.................... wrlcddata4(); 
061D:  CALL   296
.................... digit4lcd=digit4lcd+1; 
061E:  MOVLW  01
061F:  ADDWF  43,F
0620:  BTFSC  03.0
0621:  INCF   44,F
.................... digit3lcd=digit3lcd+1; 
0622:  MOVLW  01
0623:  ADDWF  41,F
0624:  BTFSC  03.0
0625:  INCF   42,F
.................... goto upperline1; 
0626:  GOTO   60B
.................... } 
.................... } 
0627:  BCF    0A.3
0628:  BCF    0A.4
0629:  GOTO   7D5 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... ////////////////////////////////////////////////////// 
.................... void ramline1() 
.................... { 
....................     
....................       line10[0]='E'; 
*
055B:  MOVLW  45
055C:  MOVWF  47
....................       line10[1]='='; 
055D:  MOVLW  3D
055E:  MOVWF  48
....................       line10[2]=digite2+48; 
055F:  MOVLW  30
0560:  ADDWF  36,W
0561:  MOVWF  49
....................       line10[3]=digite1+48; 
0562:  MOVLW  30
0563:  ADDWF  35,W
0564:  MOVWF  4A
....................       line10[4]=' '; 
0565:  MOVLW  20
0566:  MOVWF  4B
....................       line10[5]='W'; 
0567:  MOVLW  57
0568:  MOVWF  4C
....................       line10[6]='='; 
0569:  MOVLW  3D
056A:  MOVWF  4D
....................       line10[7]=digitw2+48; 
056B:  MOVLW  30
056C:  ADDWF  38,W
056D:  MOVWF  4E
....................       line10[8]=digitw1+48; 
056E:  MOVLW  30
056F:  ADDWF  37,W
0570:  MOVWF  4F
....................       line10[9]=' '; 
0571:  MOVLW  20
0572:  MOVWF  50
....................       line10[10]=' '; 
0573:  MOVWF  51
.................... if(digitd1==0) 
0574:  MOVF   29,F
0575:  BTFSS  03.2
0576:  GOTO   581
.................... { 
....................       line10[11]='L'; 
0577:  MOVLW  4C
0578:  MOVWF  52
....................       line10[12]='E'; 
0579:  MOVLW  45
057A:  MOVWF  53
....................       line10[13]='V'; 
057B:  MOVLW  56
057C:  MOVWF  54
....................       line10[14]='E'; 
057D:  MOVLW  45
057E:  MOVWF  55
....................       line10[15]='L'; 
057F:  MOVLW  4C
0580:  MOVWF  56
.................... } 
.................... if(digitd1==1) 
0581:  DECFSZ 29,W
0582:  GOTO   58D
.................... { 
....................       line10[11]='L'; 
0583:  MOVLW  4C
0584:  MOVWF  52
....................       line10[12]='E'; 
0585:  MOVLW  45
0586:  MOVWF  53
....................       line10[13]='F'; 
0587:  MOVLW  46
0588:  MOVWF  54
....................       line10[14]='T'; 
0589:  MOVLW  54
058A:  MOVWF  55
....................       line10[15]=' '; 
058B:  MOVLW  20
058C:  MOVWF  56
.................... } 
.................... if(digitd1==2) 
058D:  MOVF   29,W
058E:  SUBLW  02
058F:  BTFSS  03.2
0590:  GOTO   59B
.................... { 
....................       line10[11]='R'; 
0591:  MOVLW  52
0592:  MOVWF  52
....................       line10[12]='I'; 
0593:  MOVLW  49
0594:  MOVWF  53
....................       line10[13]='G'; 
0595:  MOVLW  47
0596:  MOVWF  54
....................       line10[14]='H'; 
0597:  MOVLW  48
0598:  MOVWF  55
....................       line10[15]='T'; 
0599:  MOVLW  54
059A:  MOVWF  56
.................... } 
....................  
....................  
.................... } 
059B:  BCF    0A.3
059C:  BCF    0A.4
059D:  GOTO   7D2 (RETURN)
....................  
.................... void ramline2() 
.................... { 
....................  
....................       line20[0]='N'; 
*
05C5:  MOVLW  4E
05C6:  MOVWF  5B
....................       line20[1]='='; 
05C7:  MOVLW  3D
05C8:  MOVWF  5C
....................       line20[2]=digitn2+48; 
05C9:  MOVLW  30
05CA:  ADDWF  3A,W
05CB:  MOVWF  5D
....................       line20[3]=digitn1+48; 
05CC:  MOVLW  30
05CD:  ADDWF  39,W
05CE:  MOVWF  5E
....................       line20[4]=' '; 
05CF:  MOVLW  20
05D0:  MOVWF  5F
....................       line20[5]='S'; 
05D1:  MOVLW  53
05D2:  MOVWF  60
....................       line20[6]='='; 
05D3:  MOVLW  3D
05D4:  MOVWF  61
....................       line20[7]=digits2+48; 
05D5:  MOVLW  30
05D6:  ADDWF  3C,W
05D7:  MOVWF  62
....................       line20[8]=digits1+48; 
05D8:  MOVLW  30
05D9:  ADDWF  3B,W
05DA:  MOVWF  63
....................       line20[9]=' '; 
05DB:  MOVLW  20
05DC:  MOVWF  64
....................    
....................       line20[10]=digit12+48; 
05DD:  MOVLW  30
05DE:  ADDWF  23,W
05DF:  MOVWF  65
....................       line20[11]=digit11+48; 
05E0:  MOVLW  30
05E1:  ADDWF  22,W
05E2:  MOVWF  66
....................       line20[12]=' ';  
05E3:  MOVLW  20
05E4:  MOVWF  67
....................  
.................... if(digitd2==0) 
05E5:  MOVF   2A,F
05E6:  BTFSS  03.2
05E7:  GOTO   5EE
.................... { 
....................       line20[13]='L'; 
05E8:  MOVLW  4C
05E9:  MOVWF  68
....................       line20[14]='V'; 
05EA:  MOVLW  56
05EB:  MOVWF  69
....................       line20[15]='L'; 
05EC:  MOVLW  4C
05ED:  MOVWF  6A
.................... } 
.................... if(digitd2==1) 
05EE:  DECFSZ 2A,W
05EF:  GOTO   5F6
.................... { 
....................       line20[13]='U'; 
05F0:  MOVLW  55
05F1:  MOVWF  68
....................       line20[14]='P'; 
05F2:  MOVLW  50
05F3:  MOVWF  69
....................       line20[15]=' '; 
05F4:  MOVLW  20
05F5:  MOVWF  6A
.................... } 
.................... if(digitd2==2) 
05F6:  MOVF   2A,W
05F7:  SUBLW  02
05F8:  BTFSS  03.2
05F9:  GOTO   600
.................... { 
....................       line20[13]='D'; 
05FA:  MOVLW  44
05FB:  MOVWF  68
....................       line20[14]='N'; 
05FC:  MOVLW  4E
05FD:  MOVWF  69
....................       line20[15]=' '; 
05FE:  MOVLW  20
05FF:  MOVWF  6A
.................... } 
....................     
....................  
....................  
....................  } 
0600:  BCF    0A.3
0601:  BCF    0A.4
0602:  GOTO   7D4 (RETURN)
....................  
....................   
.................... void startloop() 
.................... { 
.................... delay(); 
*
02D7:  CALL   1C0
.................... lcdreset(); 
.................... resetlcd(); 
.................... digit5lcd=1; //display welcome 
*
0333:  CLRF   46
0334:  MOVLW  01
0335:  MOVWF  45
.................... line1(); 
0336:  CALL   2A1
.................... digit5lcd=2; //display welcome 
0337:  CLRF   46
0338:  MOVLW  02
0339:  MOVWF  45
.................... line2(); 
033A:  CALL   2BC
.................... } 
033B:  BCF    0A.3
033C:  BCF    0A.4
033D:  GOTO   7CB (RETURN)
....................  
....................   
....................  
....................   
....................  
.................... void motor() 
.................... { 
.................... if(digitd1==1) 
*
04CC:  DECFSZ 29,W
04CD:  GOTO   4D8
.................... { 
.................... onx1(); 
.................... } 
.................... if(digitd1==2) 
*
04D8:  MOVF   29,W
04D9:  SUBLW  02
04DA:  BTFSS  03.2
04DB:  GOTO   4E6
.................... { 
.................... onx2(); 
.................... } 
.................... if(digitd2==1) 
*
04E6:  DECFSZ 2A,W
04E7:  GOTO   4F2
.................... { 
.................... onx3(); 
.................... } 
.................... if(digitd2==2) 
*
04F2:  MOVF   2A,W
04F3:  SUBLW  02
04F4:  BTFSS  03.2
04F5:  GOTO   500
.................... { 
.................... onx4(); 
.................... } 
.................... } 
*
0500:  BCF    0A.3
0501:  BCF    0A.4
0502:  GOTO   7D0 (RETURN)
....................  
.................... void adce() 
.................... { 
....................   set_adc_channel(0); 
*
0370:  MOVLW  00
0371:  MOVWF  78
0372:  MOVF   1F,W
0373:  ANDLW  C3
0374:  IORWF  78,W
0375:  MOVWF  1F
....................       delay1();         // A/D setup functions- built-in 
0376:  CALL   346
....................      value = read_adc();  
0377:  BSF    1F.1
0378:  BTFSC  1F.1
0379:  GOTO   378
037A:  BSF    03.5
037B:  MOVF   1E,W
037C:  BCF    03.5
037D:  MOVWF  25
037E:  MOVF   1E,W
037F:  MOVWF  26
....................      xadc=value; 
0380:  MOVF   26,W
0381:  MOVWF  28
0382:  MOVF   25,W
0383:  MOVWF  27
....................      value=value/10; 
0384:  MOVF   26,W
0385:  MOVWF  71
0386:  MOVF   25,W
0387:  MOVWF  70
0388:  CLRF   73
0389:  MOVLW  0A
038A:  MOVWF  72
038B:  CALL   34B
038C:  MOVF   79,W
038D:  MOVWF  26
038E:  MOVF   78,W
038F:  MOVWF  25
....................       
.................... value=value+digitep; 
0390:  MOVF   2D,W
0391:  ADDWF  25,F
0392:  BTFSC  03.0
0393:  INCF   26,F
....................      xadc=value; 
0394:  MOVF   26,W
0395:  MOVWF  28
0396:  MOVF   25,W
0397:  MOVWF  27
....................      if(xadc>99) 
0398:  MOVF   28,F
0399:  BTFSS  03.2
039A:  GOTO   39F
039B:  MOVF   27,W
039C:  SUBLW  63
039D:  BTFSC  03.0
039E:  GOTO   3A2
....................      { 
....................      value=99; 
039F:  CLRF   26
03A0:  MOVLW  63
03A1:  MOVWF  25
....................      } 
.................... digite0=value;  
03A2:  MOVF   25,W
03A3:  MOVWF  31
....................  
....................      digit1=value; 
03A4:  MOVF   25,W
03A5:  MOVWF  2C
....................      digit1=digit1/10; 
03A6:  MOVF   2C,W
03A7:  MOVWF  70
03A8:  MOVLW  0A
03A9:  MOVWF  71
03AA:  CALL   15B
03AB:  MOVF   78,W
03AC:  MOVWF  2C
....................      digit0=(value-(digit1*10)); 
03AD:  MOVF   2C,W
03AE:  MOVWF  70
03AF:  MOVLW  0A
03B0:  MOVWF  71
03B1:  CALL   170
03B2:  MOVF   78,W
03B3:  SUBWF  25,W
03B4:  MOVWF  2B
.................... digite1=digit0; 
03B5:  MOVF   2B,W
03B6:  MOVWF  35
.................... digite2=digit1; 
03B7:  MOVF   2C,W
03B8:  MOVWF  36
....................  
.................... } 
03B9:  RETLW  00
....................  
.................... void adcw() 
.................... { 
....................   set_adc_channel(1); 
03BA:  MOVLW  04
03BB:  MOVWF  78
03BC:  MOVF   1F,W
03BD:  ANDLW  C3
03BE:  IORWF  78,W
03BF:  MOVWF  1F
....................       delay1();         // A/D setup functions- built-in 
03C0:  CALL   346
....................      value = read_adc();  
03C1:  BSF    1F.1
03C2:  BTFSC  1F.1
03C3:  GOTO   3C2
03C4:  BSF    03.5
03C5:  MOVF   1E,W
03C6:  BCF    03.5
03C7:  MOVWF  25
03C8:  MOVF   1E,W
03C9:  MOVWF  26
....................      xadc=value; 
03CA:  MOVF   26,W
03CB:  MOVWF  28
03CC:  MOVF   25,W
03CD:  MOVWF  27
....................      value=value/10; 
03CE:  MOVF   26,W
03CF:  MOVWF  71
03D0:  MOVF   25,W
03D1:  MOVWF  70
03D2:  CLRF   73
03D3:  MOVLW  0A
03D4:  MOVWF  72
03D5:  CALL   34B
03D6:  MOVF   79,W
03D7:  MOVWF  26
03D8:  MOVF   78,W
03D9:  MOVWF  25
....................       
.................... value=value+digitwp; 
03DA:  MOVF   2E,W
03DB:  ADDWF  25,F
03DC:  BTFSC  03.0
03DD:  INCF   26,F
....................      xadc=value; 
03DE:  MOVF   26,W
03DF:  MOVWF  28
03E0:  MOVF   25,W
03E1:  MOVWF  27
....................      if(xadc>99) 
03E2:  MOVF   28,F
03E3:  BTFSS  03.2
03E4:  GOTO   3E9
03E5:  MOVF   27,W
03E6:  SUBLW  63
03E7:  BTFSC  03.0
03E8:  GOTO   3EC
....................      { 
....................      value=99; 
03E9:  CLRF   26
03EA:  MOVLW  63
03EB:  MOVWF  25
....................      } 
.................... digitw0=value; 
03EC:  MOVF   25,W
03ED:  MOVWF  32
....................  
....................      digit1=value; 
03EE:  MOVF   25,W
03EF:  MOVWF  2C
....................      digit1=digit1/10; 
03F0:  MOVF   2C,W
03F1:  MOVWF  70
03F2:  MOVLW  0A
03F3:  MOVWF  71
03F4:  CALL   15B
03F5:  MOVF   78,W
03F6:  MOVWF  2C
....................      digit0=(value-(digit1*10)); 
03F7:  MOVF   2C,W
03F8:  MOVWF  70
03F9:  MOVLW  0A
03FA:  MOVWF  71
03FB:  CALL   170
03FC:  MOVF   78,W
03FD:  SUBWF  25,W
03FE:  MOVWF  2B
.................... digitw1=digit0; 
03FF:  MOVF   2B,W
0400:  MOVWF  37
.................... digitw2=digit1; 
0401:  MOVF   2C,W
0402:  MOVWF  38
....................  
.................... } 
0403:  RETLW  00
....................  
.................... void adcn() 
.................... { 
....................   set_adc_channel(2); 
0404:  MOVLW  08
0405:  MOVWF  78
0406:  MOVF   1F,W
0407:  ANDLW  C3
0408:  IORWF  78,W
0409:  MOVWF  1F
....................       delay1();         // A/D setup functions- built-in 
040A:  CALL   346
....................      value = read_adc();  
040B:  BSF    1F.1
040C:  BTFSC  1F.1
040D:  GOTO   40C
040E:  BSF    03.5
040F:  MOVF   1E,W
0410:  BCF    03.5
0411:  MOVWF  25
0412:  MOVF   1E,W
0413:  MOVWF  26
....................      xadc=value; 
0414:  MOVF   26,W
0415:  MOVWF  28
0416:  MOVF   25,W
0417:  MOVWF  27
....................      value=value/10; 
0418:  MOVF   26,W
0419:  MOVWF  71
041A:  MOVF   25,W
041B:  MOVWF  70
041C:  CLRF   73
041D:  MOVLW  0A
041E:  MOVWF  72
041F:  CALL   34B
0420:  MOVF   79,W
0421:  MOVWF  26
0422:  MOVF   78,W
0423:  MOVWF  25
....................       
.................... value=value+digitnp; 
0424:  MOVF   30,W
0425:  ADDWF  25,F
0426:  BTFSC  03.0
0427:  INCF   26,F
....................      xadc=value; 
0428:  MOVF   26,W
0429:  MOVWF  28
042A:  MOVF   25,W
042B:  MOVWF  27
....................      if(xadc>99) 
042C:  MOVF   28,F
042D:  BTFSS  03.2
042E:  GOTO   433
042F:  MOVF   27,W
0430:  SUBLW  63
0431:  BTFSC  03.0
0432:  GOTO   436
....................      { 
....................      value=99; 
0433:  CLRF   26
0434:  MOVLW  63
0435:  MOVWF  25
....................      } 
.................... digitn0=value;  
0436:  MOVF   25,W
0437:  MOVWF  34
....................      digit1=value; 
0438:  MOVF   25,W
0439:  MOVWF  2C
....................      digit1=digit1/10; 
043A:  MOVF   2C,W
043B:  MOVWF  70
043C:  MOVLW  0A
043D:  MOVWF  71
043E:  CALL   15B
043F:  MOVF   78,W
0440:  MOVWF  2C
....................      digit0=(value-(digit1*10)); 
0441:  MOVF   2C,W
0442:  MOVWF  70
0443:  MOVLW  0A
0444:  MOVWF  71
0445:  CALL   170
0446:  MOVF   78,W
0447:  SUBWF  25,W
0448:  MOVWF  2B
.................... digitn1=digit0; 
0449:  MOVF   2B,W
044A:  MOVWF  39
.................... digitn2=digit1; 
044B:  MOVF   2C,W
044C:  MOVWF  3A
....................  
.................... } 
044D:  RETLW  00
....................  
....................  
.................... void adcs() 
.................... { 
....................   set_adc_channel(3); 
044E:  MOVLW  0C
044F:  MOVWF  78
0450:  MOVF   1F,W
0451:  ANDLW  C3
0452:  IORWF  78,W
0453:  MOVWF  1F
....................       delay1();         // A/D setup functions- built-in 
0454:  CALL   346
....................      value = read_adc();  
0455:  BSF    1F.1
0456:  BTFSC  1F.1
0457:  GOTO   456
0458:  BSF    03.5
0459:  MOVF   1E,W
045A:  BCF    03.5
045B:  MOVWF  25
045C:  MOVF   1E,W
045D:  MOVWF  26
....................      xadc=value; 
045E:  MOVF   26,W
045F:  MOVWF  28
0460:  MOVF   25,W
0461:  MOVWF  27
....................      value=value/10; 
0462:  MOVF   26,W
0463:  MOVWF  71
0464:  MOVF   25,W
0465:  MOVWF  70
0466:  CLRF   73
0467:  MOVLW  0A
0468:  MOVWF  72
0469:  CALL   34B
046A:  MOVF   79,W
046B:  MOVWF  26
046C:  MOVF   78,W
046D:  MOVWF  25
.................... value=value+digitsp; 
046E:  MOVF   2F,W
046F:  ADDWF  25,F
0470:  BTFSC  03.0
0471:  INCF   26,F
....................      xadc=value; 
0472:  MOVF   26,W
0473:  MOVWF  28
0474:  MOVF   25,W
0475:  MOVWF  27
....................      if(xadc>99) 
0476:  MOVF   28,F
0477:  BTFSS  03.2
0478:  GOTO   47D
0479:  MOVF   27,W
047A:  SUBLW  63
047B:  BTFSC  03.0
047C:  GOTO   480
....................      { 
....................      value=99; 
047D:  CLRF   26
047E:  MOVLW  63
047F:  MOVWF  25
....................      } 
.................... digits0=value; 
0480:  MOVF   25,W
0481:  MOVWF  33
....................      digit1=value; 
0482:  MOVF   25,W
0483:  MOVWF  2C
....................      digit1=digit1/10; 
0484:  MOVF   2C,W
0485:  MOVWF  70
0486:  MOVLW  0A
0487:  MOVWF  71
0488:  CALL   15B
0489:  MOVF   78,W
048A:  MOVWF  2C
....................      digit0=(value-(digit1*10)); 
048B:  MOVF   2C,W
048C:  MOVWF  70
048D:  MOVLW  0A
048E:  MOVWF  71
048F:  CALL   170
0490:  MOVF   78,W
0491:  SUBWF  25,W
0492:  MOVWF  2B
.................... digits1=digit0; 
0493:  MOVF   2B,W
0494:  MOVWF  3B
.................... digits2=digit1; 
0495:  MOVF   2C,W
0496:  MOVWF  3C
....................  
.................... } 
0497:  RETLW  00
....................  
....................  
....................  
....................  
.................... void adcall() 
.................... { 
.................... adce(); 
0498:  CALL   370
.................... adcw(); 
0499:  CALL   3BA
.................... adcn(); 
049A:  CALL   404
.................... adcs(); 
049B:  CALL   44E
.................... } 
049C:  BCF    0A.3
049D:  BCF    0A.4
049E:  GOTO   7CE (RETURN)
.................... void datacal() 
.................... { 
.................... digitd1=0; 
049F:  CLRF   29
.................... digitd2=0; 
04A0:  CLRF   2A
....................  
.................... digit1=digite0; 
04A1:  MOVF   31,W
04A2:  MOVWF  2C
.................... digit0=digitw0; 
04A3:  MOVF   32,W
04A4:  MOVWF  2B
.................... //digit1=digit1+1; 
.................... if(digit0>digit1) 
04A5:  MOVF   2B,W
04A6:  SUBWF  2C,W
04A7:  BTFSC  03.0
04A8:  GOTO   4AB
.................... { 
.................... digitd1=1; 
04A9:  MOVLW  01
04AA:  MOVWF  29
.................... } 
.................... digit1=digite0; 
04AB:  MOVF   31,W
04AC:  MOVWF  2C
.................... digit0=digitw0; 
04AD:  MOVF   32,W
04AE:  MOVWF  2B
.................... //digit0=digit0+1; 
.................... if(digit0<digit1) 
04AF:  MOVF   2C,W
04B0:  SUBWF  2B,W
04B1:  BTFSC  03.0
04B2:  GOTO   4B5
.................... { 
.................... digitd1=2; 
04B3:  MOVLW  02
04B4:  MOVWF  29
.................... } 
....................  
.................... digit1=digitn0; 
04B5:  MOVF   34,W
04B6:  MOVWF  2C
.................... digit0=digits0; 
04B7:  MOVF   33,W
04B8:  MOVWF  2B
.................... //digit1=digit1+1; 
.................... if(digit0>digit1) 
04B9:  MOVF   2B,W
04BA:  SUBWF  2C,W
04BB:  BTFSC  03.0
04BC:  GOTO   4BF
.................... { 
.................... digitd2=1; 
04BD:  MOVLW  01
04BE:  MOVWF  2A
.................... } 
....................  
.................... digit1=digitn0; 
04BF:  MOVF   34,W
04C0:  MOVWF  2C
.................... digit0=digits0; 
04C1:  MOVF   33,W
04C2:  MOVWF  2B
.................... //digit0=digit0+1; 
.................... if(digit0<digit1) 
04C3:  MOVF   2C,W
04C4:  SUBWF  2B,W
04C5:  BTFSC  03.0
04C6:  GOTO   4C9
.................... { 
.................... digitd2=2; 
04C7:  MOVLW  02
04C8:  MOVWF  2A
.................... } 
....................  
....................  
.................... } 
04C9:  BCF    0A.3
04CA:  BCF    0A.4
04CB:  GOTO   7CF (RETURN)
....................  
.................... void incriment() 
.................... { 
.................... digit10=digit10+1; 
*
0535:  MOVLW  01
0536:  ADDWF  20,F
.................... if(digit10>99) 
0537:  MOVF   20,W
0538:  SUBLW  63
0539:  BTFSC  03.0
053A:  GOTO   53D
.................... { 
.................... digit10=3; 
053B:  MOVLW  03
053C:  MOVWF  20
.................... } 
.................... wreprom(); 
053D:  CALL   507
.................... } 
.................... void decriment() 
.................... { 
.................... digit10=digit10-1; 
*
054E:  MOVLW  01
054F:  SUBWF  20,F
.................... if(digit10<3) 
0550:  MOVF   20,W
0551:  SUBLW  02
0552:  BTFSS  03.0
0553:  GOTO   556
.................... { 
.................... digit10=99; 
0554:  MOVLW  63
0555:  MOVWF  20
.................... } 
.................... wreprom(); 
0556:  CALL   507
.................... } 
.................... void devide() 
.................... { 
.................... digit1=digit10; 
*
0195:  MOVF   20,W
0196:  MOVWF  2C
....................      digit1=digit1/10; 
0197:  MOVF   2C,W
0198:  MOVWF  70
0199:  MOVLW  0A
019A:  MOVWF  71
019B:  CALL   15B
019C:  MOVF   78,W
019D:  MOVWF  2C
....................      digit0=(digit10-(digit1*10)); 
019E:  MOVF   2C,W
019F:  MOVWF  70
01A0:  MOVLW  0A
01A1:  MOVWF  71
01A2:  CALL   170
01A3:  MOVF   78,W
01A4:  SUBWF  20,W
01A5:  MOVWF  2B
.................... digit11=digit0; 
01A6:  MOVF   2B,W
01A7:  MOVWF  22
.................... digit12=digit1; 
01A8:  MOVF   2C,W
01A9:  MOVWF  23
.................... } 
01AA:  RETLW  00
....................  
....................  
....................  
....................  
.................... void keysense() 
.................... { 
.................... if ( !input (inc)) 
*
0526:  BSF    6F.4
0527:  MOVF   6F,W
0528:  BSF    03.5
0529:  MOVWF  07
052A:  BCF    03.5
052B:  BTFSC  07.4
052C:  GOTO   53F
.................... { 
.................... delay3(); 
052D:  CALL   503
.................... if ( !input (inc)) 
052E:  BSF    6F.4
052F:  MOVF   6F,W
0530:  BSF    03.5
0531:  MOVWF  07
0532:  BCF    03.5
0533:  BTFSC  07.4
0534:  GOTO   53F
.................... { 
.................... incriment(); 
.................... devide(); 
*
053E:  CALL   195
.................... } 
.................... } 
.................... if ( !input (dec)) 
053F:  BSF    6F.5
0540:  MOVF   6F,W
0541:  BSF    03.5
0542:  MOVWF  07
0543:  BCF    03.5
0544:  BTFSC  07.5
0545:  GOTO   558
.................... { 
.................... delay3(); 
0546:  CALL   503
.................... if ( !input (dec)) 
0547:  BSF    6F.5
0548:  MOVF   6F,W
0549:  BSF    03.5
054A:  MOVWF  07
054B:  BCF    03.5
054C:  BTFSC  07.5
054D:  GOTO   558
.................... { 
.................... decriment(); 
.................... devide(); 
*
0557:  CALL   195
.................... } 
.................... } 
.................... } 
0558:  BCF    0A.3
0559:  BCF    0A.4
055A:  GOTO   7D1 (RETURN)
....................  
....................  
.................... void delayloop() 
.................... { 
.................... digit0=digit10; 
*
062A:  MOVF   20,W
062B:  MOVWF  2B
.................... digit0=101-digit0; 
062C:  MOVF   2B,W
062D:  SUBLW  65
062E:  MOVWF  2B
.................... for(digit1=0;digit1<digit0;digit1++) 
062F:  CLRF   2C
0630:  MOVF   2B,W
0631:  SUBWF  2C,W
0632:  BTFSC  03.0
0633:  GOTO   64B
.................... { 
.................... delay4(); 
.................... if ( !input (inc)) 
*
0637:  BSF    6F.4
0638:  MOVF   6F,W
0639:  BSF    03.5
063A:  MOVWF  07
063B:  BCF    03.5
063C:  BTFSC  07.4
063D:  GOTO   640
.................... { 
.................... digit1=105; 
063E:  MOVLW  69
063F:  MOVWF  2C
.................... } 
.................... if ( !input (dec)) 
0640:  BSF    6F.5
0641:  MOVF   6F,W
0642:  BSF    03.5
0643:  MOVWF  07
0644:  BCF    03.5
0645:  BTFSC  07.5
0646:  GOTO   649
.................... { 
.................... digit1=105; 
0647:  MOVLW  69
0648:  MOVWF  2C
.................... } 
.................... } 
0649:  INCF   2C,F
064A:  GOTO   630
.................... } 
064B:  BCF    0A.3
064C:  BCF    0A.4
064D:  GOTO   7D6 (RETURN)
....................  
.................... void homeposition() 
.................... { 
.................... digitep=0;// 
064E:  CLRF   2D
.................... digitwp=0;// 
064F:  CLRF   2E
.................... digitsp=0;// 
0650:  CLRF   2F
.................... digitnp=0;// 
0651:  CLRF   30
.................... adce(); 
0652:  CALL   370
.................... adcw(); 
0653:  CALL   3BA
....................  
.................... digit0=digite0; 
0654:  MOVF   31,W
0655:  MOVWF  2B
.................... digit1=digitw0; 
0656:  MOVF   32,W
0657:  MOVWF  2C
.................... if(digit0>digit1) 
0658:  MOVF   2B,W
0659:  SUBWF  2C,W
065A:  BTFSC  03.0
065B:  GOTO   663
.................... { 
.................... digit0=digite0; 
065C:  MOVF   31,W
065D:  MOVWF  2B
.................... digit1=digitw0; 
065E:  MOVF   32,W
065F:  MOVWF  2C
.................... digitwp=digit0-digit1; 
0660:  MOVF   2C,W
0661:  SUBWF  2B,W
0662:  MOVWF  2E
.................... } 
....................  
.................... digit0=digite0; 
0663:  MOVF   31,W
0664:  MOVWF  2B
.................... digit1=digitw0; 
0665:  MOVF   32,W
0666:  MOVWF  2C
.................... if(digit0<digit1) 
0667:  MOVF   2C,W
0668:  SUBWF  2B,W
0669:  BTFSC  03.0
066A:  GOTO   672
.................... { 
.................... digit0=digite0; 
066B:  MOVF   31,W
066C:  MOVWF  2B
.................... digit1=digitw0; 
066D:  MOVF   32,W
066E:  MOVWF  2C
.................... digitep=digit1-digit0; 
066F:  MOVF   2B,W
0670:  SUBWF  2C,W
0671:  MOVWF  2D
.................... } 
....................  
.................... adcs(); 
0672:  CALL   44E
.................... adcn(); 
0673:  CALL   404
....................  
.................... digit0=digits0; 
0674:  MOVF   33,W
0675:  MOVWF  2B
.................... digit1=digitn0; 
0676:  MOVF   34,W
0677:  MOVWF  2C
.................... if(digit0>digit1) 
0678:  MOVF   2B,W
0679:  SUBWF  2C,W
067A:  BTFSC  03.0
067B:  GOTO   683
.................... { 
.................... digit0=digits0; 
067C:  MOVF   33,W
067D:  MOVWF  2B
.................... digit1=digitn0; 
067E:  MOVF   34,W
067F:  MOVWF  2C
.................... digitnp=digit0-digit1; 
0680:  MOVF   2C,W
0681:  SUBWF  2B,W
0682:  MOVWF  30
.................... } 
....................  
....................  
.................... digit0=digits0; 
0683:  MOVF   33,W
0684:  MOVWF  2B
.................... digit1=digitn0; 
0685:  MOVF   34,W
0686:  MOVWF  2C
.................... if(digit0<digit1) 
0687:  MOVF   2C,W
0688:  SUBWF  2B,W
0689:  BTFSC  03.0
068A:  GOTO   692
.................... { 
.................... digit0=digits0; 
068B:  MOVF   33,W
068C:  MOVWF  2B
.................... digit1=digitn0; 
068D:  MOVF   34,W
068E:  MOVWF  2C
.................... digitsp=digit1-digit0; 
068F:  MOVF   2B,W
0690:  SUBWF  2C,W
0691:  MOVWF  2F
.................... } 
.................... wreprom1(); 
....................  
.................... digit5lcd=3; //display welcome 
*
070E:  CLRF   46
070F:  MOVLW  03
0710:  MOVWF  45
.................... line1(); 
0711:  CALL   2A1
.................... digit5lcd=4; //display welcome 
0712:  CLRF   46
0713:  MOVLW  04
0714:  MOVWF  45
.................... line2(); 
0715:  CALL   2BC
....................  
.................... delaysecond(); 
0716:  CALL   33E
.................... delaysecond(); 
0717:  CALL   33E
.................... } 
0718:  BCF    0A.3
0719:  BCF    0A.4
071A:  GOTO   7E5 (RETURN)
....................  
....................  
....................  
.................... void main() 
.................... { 
*
0723:  MOVF   03,W
0724:  ANDLW  1F
0725:  MOVWF  03
0726:  MOVLW  57
0727:  MOVWF  77
0728:  MOVLW  20
0729:  MOVWF  04
072A:  BCF    03.7
072B:  CLRF   00
072C:  INCF   04,F
072D:  DECFSZ 77,F
072E:  GOTO   72B
072F:  CLRF   78
0730:  CLRF   79
0731:  CLRF   7A
0732:  CLRF   7B
0733:  CLRF   7C
0734:  CLRF   7D
0735:  CLRF   7E
0736:  MOVLW  50
0737:  MOVWF  77
0738:  MOVLW  A0
0739:  MOVWF  04
073A:  BCF    03.7
073B:  CLRF   00
073C:  INCF   04,F
073D:  DECFSZ 77,F
073E:  GOTO   73B
073F:  MOVLW  60
0740:  MOVWF  77
0741:  MOVLW  10
0742:  MOVWF  04
0743:  BSF    03.7
0744:  CLRF   00
0745:  INCF   04,F
0746:  DECFSZ 77,F
0747:  GOTO   744
0748:  BCF    03.7
0749:  MOVLW  60
074A:  MOVWF  77
074B:  MOVLW  90
074C:  MOVWF  04
074D:  BSF    03.7
074E:  CLRF   00
074F:  INCF   04,F
0750:  DECFSZ 77,F
0751:  GOTO   74E
0752:  BCF    03.7
0753:  CLRF   20
0754:  CLRF   04
0755:  BCF    03.7
0756:  MOVLW  1F
0757:  ANDWF  03,F
0758:  MOVLW  61
0759:  BSF    03.5
075A:  MOVWF  0F
075B:  MOVF   0F,W
075C:  BSF    03.6
075D:  BCF    07.3
075E:  MOVLW  19
075F:  BCF    03.6
0760:  MOVWF  19
0761:  MOVLW  A6
0762:  MOVWF  18
0763:  MOVLW  90
0764:  BCF    03.5
0765:  MOVWF  18
0766:  BSF    03.5
0767:  BSF    03.6
0768:  MOVF   09,W
0769:  ANDLW  C0
076A:  MOVWF  09
076B:  BCF    03.6
076C:  BCF    1F.4
076D:  BCF    1F.5
076E:  MOVLW  00
076F:  BSF    03.6
0770:  MOVWF  08
0771:  BCF    03.5
0772:  CLRF   07
0773:  CLRF   08
0774:  CLRF   09
....................  
....................    setup_adc_ports(sAN0|sAN1|sAN2|sAN3|VSS_VDD); 
*
0785:  BSF    03.5
0786:  BSF    03.6
0787:  MOVF   09,W
0788:  ANDLW  C0
0789:  MOVWF  09
078A:  BCF    03.6
078B:  BCF    1F.4
078C:  BCF    1F.5
078D:  MOVLW  0F
078E:  BSF    03.6
078F:  MOVWF  08
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0790:  BCF    03.5
0791:  BCF    03.6
0792:  BSF    1F.6
0793:  BSF    1F.7
0794:  BSF    03.5
0795:  BSF    1F.7
0796:  BCF    03.5
0797:  BSF    1F.0
....................    setup_spi(SPI_SS_DISABLED); 
0798:  BCF    14.5
0799:  BCF    6F.5
079A:  MOVF   6F,W
079B:  BSF    03.5
079C:  MOVWF  07
079D:  BCF    03.5
079E:  BSF    6F.4
079F:  MOVF   6F,W
07A0:  BSF    03.5
07A1:  MOVWF  07
07A2:  BCF    03.5
07A3:  BCF    6F.3
07A4:  MOVF   6F,W
07A5:  BSF    03.5
07A6:  MOVWF  07
07A7:  MOVLW  01
07A8:  BCF    03.5
07A9:  MOVWF  14
07AA:  MOVLW  00
07AB:  BSF    03.5
07AC:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
07AD:  MOVF   01,W
07AE:  ANDLW  C7
07AF:  IORLW  08
07B0:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
07B1:  BCF    03.5
07B2:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
07B3:  MOVLW  00
07B4:  MOVWF  78
07B5:  MOVWF  12
07B6:  MOVLW  00
07B7:  BSF    03.5
07B8:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC);// This device COMP currently not supported by the PICWizard 
07B9:  BCF    03.5
07BA:  BSF    03.6
07BB:  CLRF   07
07BC:  CLRF   08
07BD:  CLRF   09
.................... //Setup_Oscillator parameter not selected from Intr Oscillotar Config tab 
....................  
....................    // TODO: USER CODE!! 
.................... output_low(RW); 
07BE:  BSF    03.5
07BF:  BCF    03.6
07C0:  BCF    09.1
07C1:  BCF    03.5
07C2:  BCF    09.1
.................... digitep=0;// 
07C3:  CLRF   2D
.................... digitwp=0;// 
07C4:  CLRF   2E
.................... digitsp=0;// 
07C5:  CLRF   2F
.................... digitnp=0;// 
07C6:  CLRF   30
.................... offall(); 
07C7:  CALL   058
.................... readeeprom(); 
07C8:  GOTO   069
.................... devide(); 
07C9:  CALL   195
.................... startloop(); 
07CA:  GOTO   2D7
.................... delaysecond(); 
07CB:  CALL   33E
.................... delaysecond(); 
07CC:  CALL   33E
.................... //homeposition(); 
.................... TK1: 
.................... adcall(); 
07CD:  GOTO   498
.................... datacal(); 
07CE:  GOTO   49F
.................... motor(); 
07CF:  GOTO   4CC
.................... keysense(); 
07D0:  GOTO   526
.................... ramline1(); 
07D1:  GOTO   55B
.................... line1ram(); 
07D2:  GOTO   59E
.................... ramline2(); 
07D3:  GOTO   5C5
.................... line2ram(); 
07D4:  GOTO   603
.................... delayloop(); 
07D5:  GOTO   62A
.................... if ( !input (dec)) 
07D6:  BSF    6F.5
07D7:  MOVF   6F,W
07D8:  BSF    03.5
07D9:  MOVWF  07
07DA:  BCF    03.5
07DB:  BTFSC  07.5
07DC:  GOTO   7E6
.................... { 
.................... if ( !input (inc)) 
07DD:  BSF    6F.4
07DE:  MOVF   6F,W
07DF:  BSF    03.5
07E0:  MOVWF  07
07E1:  BCF    03.5
07E2:  BTFSC  07.4
07E3:  GOTO   7E5
.................... { 
.................... homeposition(); 
07E4:  GOTO   64E
.................... } 
.................... delay6(); 
07E5:  CALL   71B
.................... } 
.................... if ( !input (inc)) 
07E6:  BSF    6F.4
07E7:  MOVF   6F,W
07E8:  BSF    03.5
07E9:  MOVWF  07
07EA:  BCF    03.5
07EB:  BTFSC  07.4
07EC:  GOTO   7EE
.................... { 
.................... delay6(); 
07ED:  CALL   71B
.................... } 
....................  
.................... goto TK1; 
07EE:  GOTO   7CD
....................  
.................... } 
....................  
....................  
....................  
....................  
07EF:  SLEEP

Configuration Fuses:
   Word  1: 2014   INTRC_IO NOWDT NOPUT NOMCLR PROTECT CPD NOBROWNOUT NOIESO NOFCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
